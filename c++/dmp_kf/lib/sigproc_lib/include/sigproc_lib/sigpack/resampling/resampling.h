// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
#ifndef SP_RESAMPLING_H
#define SP_RESAMPLING_H

namespace as64_
{

namespace spl_
{

    ///
    /// @defgroup resampling Resampling
    /// \brief Resampling functions.
    /// @{

    ////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Upsampling without anti alias filtering.
    /// @returns A vector with p-1 zeros inserted in the input vector [x0,0,0,..,x1,0,0,..-..,xN,0,0,..]
    /// @param x Input vector
    /// @param p Upsampling factor
    ////////////////////////////////////////////////////////////////////////////////////////////
    template <class T1>
    arma::Col<T1> upsample(const arma::Col<T1>& x, const int p )
    {
        long int N = x.size();
        arma::Col<T1> y;
        y.set_size(p*N);
        y.zeros();
        for(long int n=0; n<N; n++)
            y[p*n] = x[n];
        return y;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Upsampling with anti alias filtering.
    ///
    /// p-1 zeros is inserted in the input vector as in #upsample function and the filtered in a K-tap anti aliasing filter generated by #fir1 function
    /// @returns A vector p times longer than the input vector
    /// @param x Input vector
    /// @param p Upsampling factor
    /// @param K Number of filter taps
    ////////////////////////////////////////////////////////////////////////////////////////////
    template <class T1>
    arma::Col<T1> upfir(const arma::Col<T1>& x, const int p, const int K )
    {
        FIR_filt<T1,double,T1> AA;
        AA.set_coeffs(fir1(K,1/float(p)));
        return AA.filter(upsample(x,p));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Downsampling without anti alias filtering.
    /// @returns A vector with every q:th value from the input vector
    /// @param x Input vector
    /// @param q Downsampling factor
    ////////////////////////////////////////////////////////////////////////////////////////////
    template <class T1>
    arma::Col<T1> downsample(const arma::Col<T1>& x, const int q )
    {
        arma::Col<T1> y;
        int N = int(floor(1.0*x.size()/q));
        y.set_size(N);
        for(long int n=0; n<N; n++)
            y[n] = x[n*q];
        return y;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Downsampling with anti alias filtering.
    ///
    /// An K-tap anti aliasing filter generated by #fir1 function is applied before the #downsample function
    /// @returns A vector q times shorter than the input vector
    /// @param x Input vector
    /// @param q Downsampling factor
    /// @param K Number of filter taps
    ////////////////////////////////////////////////////////////////////////////////////////////
    template <class T1>
    arma::Col<T1> downfir(const arma::Col<T1>& x, const int q, const int K )
    {
        FIR_filt<T1,double,T1> AA;
        AA.set_coeffs(fir1(K,1/float(q)));
        return downsample(AA.filter(x),q);
    }
    /// @}
} // end namespace

}

#endif
