#include "BHandBH8_262.h"

#include "BHandHardware.h"


#define MIN_VALUE_INT32 -2147483648
#define MAX_VALUE_INT32 2147483647

#define MIN_VALUE_UINT32 0
#define MAX_VALUE_UINT32 4294967296


///////////////////////////////////////////////////////////////////////////////
// A list of all known properties for the BH8-262 BarrettHand
///////////////////////////////////////////////////////////////////////////////

BHandProperty propertyList_BH8_262[BHAND_BH8_262_NUM_PROPERTIES] = {

	// Movement properties (4)
	BHandProperty("Movement",           "DP",     "Default Position",                           false,r262finger,r262finger,r262finger,r262spread, "Destination of M command if no argument specified", "DP should be set to within the values that are bounded by the joint limits of the axes (e.g. approximately 0 to 18,000 for fingers and approximately 0 to 3150 for spread)."),
	BHandProperty("Movement",           "DS",     "Default Step",                               false,r262finger,r262finger,r262finger,r262spread, "Size of IC or IO command movement if no argument specified", "DS should be set within the values that are bounded by the joint limits of the axes (e.g. approximately 0 to 18,000 for fingers and approximately 0 to 3150 for spread)."),
	BHandProperty("Movement",           "MOV",    "Maximum Open Velocity",                      false, r16_4080, r16_4080, r16_4080, r16_4080, "Controls the maximum velocity while opening a motor.", ""),
	BHandProperty("Movement",           "MCV",    "Maximum Close Velocity",                     false, r16_4080, r16_4080, r16_4080, r16_4080, "Controls the maximum velocity while closing a motor.", ""),

	// Strain Gauge properties (4)
	BHandProperty("Strain",             "MSG",    "Maximum Strain Gauge",                       false,   r0_256,   r0_256,   r0_256,   r0_256, "In O, C, IO, IC, M, TO, TC, and HOME commands, a motor's motion is terminated if its strain gauge value exceeds MSG.", "HSG is the preferred alias to MSG.  When possible, please use HSG in place of MSG.  A value of 255 or 256 disables the strain gage checking during motion commands."),
	BHandProperty("Strain",             "HSG",    "Highest Strain Gauge Value",                 false,   r0_256,   r0_256,   r0_256,   r0_256, "In O, C, IO, IC, M, TO, TC, and HOME commands, a motor's motion is terminated if its strain gauge value exceeds HSG.", "This command is an alias for MSG.  When writing new code, it is recommended to use this command instead of MSG.  A value of 255 or 256 disables the strain gage checking during motion commands."),
	BHandProperty("Strain",             "LSG",    "Lowest Strain Gauge Value",                  false,   r0_256,   r0_256,   r0_256,   r0_256, "In O, C, IO, IC, M, TO, TC, and HOME commands, a motor's motion is terminated if its strain gauge value falls below LSG.", "A value of 255 or 256 disables the strain gage checking during motion commands."),
	BHandProperty("Strain",             "SG",     "Strain Gauge",                                true,   r0_256,   r0_256,   r0_256,   r0_256, "The present strain gage value for the motor.", "Returns 255 if there is no strain gauge."),

	// Breakaway properties (4)
	BHandProperty("Breakaway",          "BDAT",   "Breakaway Detection Acceleration Threshold", false, r0_20000, r0_20000, r0_20000, r0_20000, "Used to adjust the breakaway detection accuracy", "Units of BDAT are: Encoder counts/(Ticklet2).  There are 307 ticklets per millisecond."),
	BHandProperty("Breakaway",          "BS",     "Breakaway Stop",                             false,       r1,       r1,       r1,       r1, "Used to stop finger as soon as breakaway has been detected.", "When set to 1, the finger motor will stop when breakaway is detected."),
	BHandProperty("Breakaway",          "BD",     "Breakaway-Detected Flag",                     true,       r1,       r1,       r1,       r1, "To determine if breakaway has occurred", "Flag is set when a breakaway is detected.  Flag is cleared after an O, TO, or HI command."),
	BHandProperty("Breakaway",          "BP",     "Breakaway Position",                          true, r0_20000, r0_20000, r0_20000, r0_20000, "Stores position of last breakaway", "Stored position of location of last breakaway.  Position is cleared after an O, TO, or HI."),

	// Motor properties (3)
	BHandProperty("Motor",              "P",      "Present Position",                            true, r0_17500, r0_17500, r0_17500, r0_3150, "The present position of the motor.", "The range of the position parameter is dependent on the values of the OT (open target) and the CT (close target) parameters.  If these parameters are set beyond the joint stops then the joint stops themselves will dictate the range of position values, in which case the ranges may differ slightly from finger to finger."),
	BHandProperty("Motor",              "OD",     "Odometer",                                   false,      r32,      r32,      r32,      r32, "The total number of counts traveled by the selected motor, divided by 1000.", "This value is never reset; it is maintained through power failures and firmware downloads."),
	BHandProperty("Motor",              "S",      "Status",                                      true,      r15,      r15,      r15,      r15, "The present status of the motor.  0 if ready to be used, or a status code otherwise.", "Refer to BH8-262 user manual for details on these status codes."),

	// RealTime properties (12)
	BHandProperty("RealTime",           "LCV",      "Loop Control Velocity",                    false, r1, r1, r1, r1, "If non-zero, then a velocity byte will be sent in the control block for the motor.", ""),
	BHandProperty("RealTime",           "LCVC",     "Loop Control Velocity Coefficient",        false, r8, r8, r8, r8, "When the firmware receives a velocity byte in a control block, it multiplies the value by the value of LCVC before passing it to the affected motor.", ""),
	BHandProperty("RealTime",           "LCPG",     "Loop Control Proportional Gain",           false, r1, r1, r1, r1, "If non-zero, then a Proportional Gain byte will be sent in the control block for the motor.", "This controls the constant that is multiplied by the velocity error in order to produce the motor torque."),
	BHandProperty("RealTime",           "LCT",      "Loop Control Torque",                      false, r1, r1, r1, r1, "If non-zero, then a 2-byte signed torque will be sent in the control block for the motor.", "Motor torque is set using position mode by setting the commanded position reference equal to the actual position plus the desired torque value."),
	BHandProperty("RealTime",           "LFAIN",    "Loop Feedback Analog Input",               false, r1, r1, r1, r1, "If non-zero, then a 1-byte unsigned analog value will be sent in the control block for the motor.", ""),
	BHandProperty("RealTime",           "LFBP",     "Loop Feedback Breakaway Position",         false, r1, r1, r1, r1, "If non-zero, then the firmware sends two unsigned bytes giving the most recently recorded breakaway position for the motor.", ""),
	BHandProperty("RealTime",           "LFV",      "Loop Feedback Velocity",                   false, r1, r1, r1, r1, "If non-zero, then the firmware sends a signed byte giving the present velocity for the motor divided by the LFVC parameter.", ""),
	BHandProperty("RealTime",           "LFVC",     "Loop Feedback Velocity Coefficient",       false, r8, r8, r8, r8, "Before sending a Loop Feedback Velocity byte, the firmware divides the velocity by this parameter's value.", ""),
	BHandProperty("RealTime",           "LFS",      "Loop Feedback Strain",                     false, r1, r1, r1, r1, "If non-zero, then the firmware sends an unsigned byte giving the strain gauge value for the motor.", ""),
	BHandProperty("RealTime",           "LFAP",     "Loop Feedback Absolute Position",          false, r1, r1, r1, r1, "If non-zero, then the firmware sends an unsigned two-byte value giving the present position of the motor.", ""),
	BHandProperty("RealTime",           "LFDP",     "Loop Feedback Delta Position",             false, r1, r1, r1, r1, "If non-zero, then the firmware sends a signed byte giving the change in position since the last datum, divided by the value of the LFDPC parameter.", "A conflict occurs when the change in position is too great to transmit in a single signed byte, even after scaling. See section 6.2.3 for more information."),
	BHandProperty("RealTime",           "LFDPC",    "Loop Feedback Delta Position Coefficient", false, r8, r8, r8, r8, "Used to scale a delta position value.", "Delta position is the change in position from the last reported position and is limited to one signed byte.  The Present position is read and compared to the last reported position.  The difference is divided by the RealTime variable LFDPC, clipped to a single signed byte, and then sent to the host.  The value sent to the host should be multiplied by LFDPC and then added to the last reported position"),

	// Advanced BH8-262 properties
	BHandProperty("Advanced - 262",     "FDZ",      "Filter Derivative Zero",                   false,     r8,       r8,      r8,      r8, "Used to calculate the desired motor torque.", "FDG sets A in the HCTL-1100 controller, which is applied as specified in Equation 1 on page 23 of http://www.hctl-1100.com/HCTL%20docs/HCTL-1100%20Data%20Sheet.pdf.  Setting this parameter to a non-zero value increases susceptibility to random high-frequency noise."),
	BHandProperty("Advanced - 262",     "FIP",      "Filter Integral Pole",                     false,     r8,       r8,      r8,      r8, "Used to calculate the desired motor torque.", "FIP sets B in the HCTL-1100 controller, which is applied as specified in Equation 1 on page 23 of http://www.hctl-1100.com/HCTL%20docs/HCTL-1100%20Data%20Sheet.pdf.  Setting this parameter to a non-zero value can drive the system unstable."),
	BHandProperty("Advanced - 262",     "FPG",      "Filter Proportional Gain",                 false,     r8,       r8,      r8,      r8, "Used to calculate the desired motor torque.", "FPG sets K in the HCTL-1100 controller, which is applied as specified in Equation 1 on page 23 of http://www.hctl-1100.com/HCTL%20docs/HCTL-1100%20Data%20Sheet.pdf."),
	BHandProperty("Advanced - 262",     "IHIT",     "Initialization hit count",                 false,     r16,     r16,     r16,     r16, "If non-zero, then while initializing the motor impacts the hard stop the given number of times.", "Barrett recommends not setting IHIT to a value greater than 5.  IHIT is used to get a consistent origin for the finger motors, and thus a consistent breakaway force."),
	BHandProperty("Advanced - 262",     "SAMPLE",   "Sample Time",                              false, r15_255, r15_255, r15_255, r15_255, "Controls the sample frequency of the motor controller chip.", "Written into the HCTL-1100 Sample Timer register according to See http://www.hctl-1100.com/HCTL%20docs/HCTL-1100%20Data%20Sheet.pdf.  (The HCTL-1100 clock speed used in the BH8-series Hand is 2.00 MHz.)  Barrett Technology does not recommend changing this parameter from default."),

	// Advanced motor properties
	BHandProperty("Advanced - Motor",   "ACCEL",    "Acceleration",                             false,      r16,      r16,      r16,      r16, "Maximum acceleration and deceleration when moving from one position to another.", "While the ACCEL parameter has a rather large range of values that it can accept, the motor can only follow a small subset of those values.  The range of the subset is based on the motor control parameters (e.g. SAMPLE, FPG, FDZ, FIP).  See http://literature.agilent.com/litweb/pdf/5965-5893E.pdf."),
	BHandProperty("Advanced - Motor",   "CT",       "Close Target",                             false,      r16,      r16,      r16,      r16, "This is the position gone to by a C (\"Close\") command.", "While CT can be set as high as 65,535, its true range of useful values is bounded by the joint limits of the axes (e.g. approximately 0 to 18,000 for fingers and approximately 0 to 3150 for spread)."),
	BHandProperty("Advanced - Motor",   "EN",       "Enabled",                                  false,       r1,       r1,       r1,       r1, "If non-zero, then a motion command with no motor prefix will act on this motor.", ""),
	BHandProperty("Advanced - Motor",   "HOLD",     "Hold",                                     false,       r1,       r1,       r1,       r1, "If non-zero, then the motor is left energized after each motion command in order to hold the position constant.", "Since the fingers are not back-drivable, this is generally set to 1 only for the spread motor."),
	BHandProperty("Advanced - Motor",   "IOFF",     "Initialization Offset",                    false,      r16,      r16,      r16,      r16, "This is the distance this motor's origin is shifted away from the full open position.", "Adjusting this value on a finger motor also affects the force required to cause breakaway of the TorqueSwitchTM clutch.  Larger values result in less compression of the Belleville washer, and so result in lower breakaway forces; smaller values similarly result in higher breakaway forces.  Although IOFF can be set as high as 65,535, its true range of useful values is from 0 to approximately 500."),
	BHandProperty("Advanced - Motor",   "IVEL",     "Initialization Velocity",                  false, r16_4080, r16_4080, r16_4080, r16_4080, "This value replaces MOV (\"Motor Open Velocity\") during initialization; this allows a consistent initialization velocity even if MOV is adjusted.", "Barrett Technology does not recommend increasing IVEL beyond its default value. Permanent deformation of Bellville washers could result. This would prevent the finger breakaway mechanism from engaging."),
	BHandProperty("Advanced - Motor",   "MPE",      "Maximum Position Error",                   false,      r16,      r16,      r16,      r16, "After moving to a desired position, if the position error is less than MPE then the move is considered a success.", "While MPE can be set as high as 65,535, its true range of useful values is bounded by the joint limits of the axes (e.g. approximately 0 to 18,000 for fingers and approximately 0 to 3150 for spread)."),
	BHandProperty("Advanced - Motor",   "OT",       "Open Target",                              false,      r16,      r16,      r16,      r16, "This is the position gone to by an O (\"Open\") command.", "While OT can be set as high as 65,535, its true range of useful values is bounded by the joint limits of the axes (e.g. approximately 0 to 17,800 for fingers and approximately 0 to 3150 for spread)."),
	BHandProperty("Advanced - Motor",   "SGFLIP",   "Strain Gage Flip",                         false,       r1,       r1,       r1,       r1, "If non-zero, then all strain gage values for this motor are subtracted from 255 before being sent to the host.", "Used to invert strain gauge readings.  This is a legacy command and may not be supported in future releases.  It is strongly recommended that you avoid using SGFLIP since it may be dropped in future revisions of the firmware."),
	BHandProperty("Advanced - Motor",   "TSTOP",    "Time to Stop",                             false,      r16,      r16,      r16,      r16, "Time in milliseconds before motor is considered stopped.", "WARNING: Please use caution when adjusting this parameter.  Setting TSTOP higher than its default can result in the motors heating up very quickly under moderate to heavy usage."),

	// Advanced global properties
	BHandProperty("Advanced - Global", "LFDPD",     "Loop Feedback Delta Position Discard",     false,      r1, "If non-zero, then in RealTime mode any position change that cannot be sent in a delta position datum is discarded. If zero, then any unsent position change is accumulated for transmission in the next cycle.", ""),

	// Global properties - configuration (3)
	BHandProperty("Global",            "BAUD",      "Baud rate",                                false,  r6_384, "Controls the serial port baud rate. Value is baud rate divided by 100.", ""),
	BHandProperty("Global",            "LFT",       "Loop Feedback Temperature",                false,      r1, "If non-zero, then when in RealTime mode the firmware sends a signed two-byte datum of temperature in each feedback block.", ""),
	BHandProperty("Global",            "OTEMP",     "OverTemperature",                          false, r0_1250, "If non-zero, then if the temperature exceeds this value then any motor command fails with an overtemperature error.", "Value is temperature in tenths of a degrees C."),

	// Global properties - status (5)
	BHandProperty("Global",            "TEMP",      "Temperature",                               true, r_550_1250, "The present temperature on the CPU board in tenths of a degree C.", ""),
	BHandProperty("Global",            "PTEMP",     "Peak Temperature",                          true,    r0_1250, "The maximum temperature ever experienced by this hand", "This value is never reset; it is maintained through power failures and firmware downloads."),
	BHandProperty("Global",            "UPSECS",    "Uptime Seconds",                            true,        r32, "The total power-up time for this hand.", "This value is never reset; it is maintained through power failures and firmware downloads. The parameter can accommodate 136 years of power-up time before rolling over."),
	BHandProperty("Global",            "SN",        "Serial Number",                             true,        r32, "The serial number of the hand.", "This value is never reset; it is maintained through power failures and firmware downloads. Hands upgraded to firmware version 4.2 in the field will have a serial number of 0."),
	BHandProperty("Global",            "LFDPD",     "Loop Feedback Delta Position Discard",     false,         r1, "If non-zero, then in RealTime mode any position change that cannot be sent in a delta position datum is discarded. If zero, then any unsent position change is accumulated for transmission in the next cycle.", "")

	};
